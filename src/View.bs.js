// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as FramerMotion from "framer-motion";
import * as Icon$Bgquickstartcom from "./Icon.bs.js";
import * as Model$Bgquickstartcom from "./Model.bs.js";

function View$TheHeader(Props) {
  return React.createElement(React.Fragment, undefined, React.createElement("h1", {
                  className: "text-4xl font-bold text-gray-200"
                }, "BG QuickStart"), React.createElement("h2", {
                  className: "mb-6 text-sm text-gray-500"
                }, "Built by ", React.createElement("a", {
                      className: "text-gray-500 underline transition duration-500 ease-out hover:text-gray-300",
                      href: "https://github.com/imjoshellis",
                      rel: "noopener noreferrer",
                      target: "_blank"
                    }, "@imjoshellis")));
}

var TheHeader = {
  make: View$TheHeader
};

var initial = {
  opacity: 0.0,
  scale: 0.9,
  y: -10
};

var animate = {
  opacity: 1.0,
  scale: 1.0,
  y: 0
};

var exit = {
  opacity: 0.0,
  scale: 0.9,
  y: 10
};

var transition = {
  duration: 0.1,
  ease: "easeOut"
};

function View$Page$Spinner$Button(Props) {
  var onClick = Props.onClick;
  var className = Props.className;
  var icon = Props.icon;
  var label = Props.label;
  return React.createElement(FramerMotion.motion.div, {
              children: React.createElement("div", {
                    className: [
                        "flex flex-row justify-around items-center p-3 px-4 rounded font-bold cursor-pointer shadow-lg transform active:scale-95 hover:scale-105 transition",
                        className
                      ].join(" "),
                    onClick: (function (param) {
                        return Curry._1(onClick, undefined);
                      })
                  }, icon, label.toUpperCase()),
              initial: {
                opacity: 0.0,
                y: -5
              },
              animate: {
                opacity: 1.0,
                y: 0
              },
              transition: {
                delay: 0.25
              }
            });
}

var Button = {
  make: View$Page$Spinner$Button
};

function View$Page$Spinner$StartPlayerArrow(Props) {
  var angle = Props.angle;
  var onClick = Props.onClick;
  return React.createElement(FramerMotion.motion.div, {
              children: React.createElement("div", {
                    className: "flex flex-col items-center justify-center w-2/3 startIcon"
                  }, React.createElement(Icon$Bgquickstartcom.Arrow.make, {
                        height: "32",
                        width: "32"
                      })),
              initial: {
                rotate: angle.prev
              },
              animate: {
                rotate: angle.next
              },
              transition: {
                duration: 0.25
              },
              onClick: onClick,
              className: "flex flex-col items-center justify-center text-gray-500 bg-gray-800 border-2 border-gray-700 border-solid rounded-full cursor-pointer start h-12 w-12 hover:bg-gray-700 transition"
            });
}

var StartPlayerArrow = {
  make: View$Page$Spinner$StartPlayerArrow
};

function View$Page$Spinner$PlayerSeat(Props) {
  var rotateString = Props.rotateString;
  var seatNumber = Props.seatNumber;
  var player = Props.player;
  return React.createElement("div", {
              className: "m-auto dotBox",
              style: {
                transform: rotateString
              }
            }, React.createElement(FramerMotion.motion.div, {
                  className: "w-8 h-8 bg-gray-800 rounded-full dotItem dot"
                }), Caml_obj.caml_equal(seatNumber, player) ? React.createElement(FramerMotion.motion.div, {
                    initial: {
                      opacity: 0.0
                    },
                    animate: {
                      opacity: 1.0
                    },
                    transition: {
                      delay: 0.125,
                      duration: 0.25,
                      ease: "easeIn"
                    },
                    className: "w-8 h-8 bg-gray-400 rounded-full dotItem dot"
                  }) : React.createElement(React.Fragment, undefined));
}

var PlayerSeat = {
  make: View$Page$Spinner$PlayerSeat
};

function View$Page$Spinner$PlayerSeats(Props) {
  var count = Props.count;
  var player = Props.player;
  return React.createElement(React.Fragment, undefined, Belt_Array.map(Belt_Array.range(1, count), (function (seatNumber) {
                    var angle = String(Math.imul(Caml_int32.div(360, count), seatNumber) + 225 | 0) + "deg";
                    var rotateString = "rotate(" + angle + ")";
                    return React.createElement(View$Page$Spinner$PlayerSeat, {
                                rotateString: rotateString,
                                seatNumber: seatNumber,
                                player: player,
                                key: "player-seat-" + String(seatNumber)
                              });
                  })));
}

var PlayerSeats = {
  make: View$Page$Spinner$PlayerSeats
};

function View$Page$Spinner(Props) {
  var count = Props.count;
  var player = Props.player;
  var angle = Props.angle;
  var dispatch = Model$Bgquickstartcom.Dispatch.use(undefined);
  var reroll = function (param) {
    return Curry._1(dispatch, /* Roll */{
                count: count
              });
  };
  var reset = function (param) {
    return Curry._1(dispatch, /* Reset */0);
  };
  return React.createElement(FramerMotion.motion.div, {
              children: null,
              exit: exit,
              initial: initial,
              animate: animate,
              transition: transition,
              key: "spinner"
            }, React.createElement("div", {
                  className: "dotWrap"
                }, React.createElement(View$Page$Spinner$PlayerSeats, {
                      count: count,
                      player: player
                    }), React.createElement("div", {
                      className: "m-auto startBox"
                    }, React.createElement(View$Page$Spinner$StartPlayerArrow, {
                          angle: angle,
                          onClick: reroll
                        }))), React.createElement("p", {
                  className: "text-sm font-bold text-gray-400"
                }, "(YOU)"), React.createElement("div", {
                  className: "grid grid-cols-2 gap-4 mt-12"
                }, React.createElement(View$Page$Spinner$Button, {
                      onClick: reset,
                      className: "text-red-900 bg-red-300 hover:bg-red-200",
                      icon: React.createElement(Icon$Bgquickstartcom.Arrow.make, {
                            height: "24",
                            width: "24"
                          }),
                      label: "reset"
                    }), React.createElement(View$Page$Spinner$Button, {
                      onClick: reroll,
                      className: "text-green-900 bg-green-400 hover:bg-green-300",
                      icon: React.createElement(Icon$Bgquickstartcom.Shuffle.make, {
                            height: "24",
                            width: "24"
                          }),
                      label: "reroll"
                    })));
}

var Spinner = {
  Button: Button,
  StartPlayerArrow: StartPlayerArrow,
  PlayerSeat: PlayerSeat,
  PlayerSeats: PlayerSeats,
  make: View$Page$Spinner
};

function View$Page$Grid$CountButton(Props) {
  var num = Props.num;
  var dispatch = Model$Bgquickstartcom.Dispatch.use(undefined);
  return React.createElement("div", {
              className: "px-8 py-8 text-xl font-bold text-gray-900 bg-gray-600 rounded-lg shadow-lg cursor-pointer transform hover:bg-gray-400 hover:scale-105 active:bg-gray-700 active:scale-105 transition",
              onClick: (function (param) {
                  return Curry._1(dispatch, /* Roll */{
                              count: num
                            });
                })
            }, num);
}

var CountButton = {
  make: View$Page$Grid$CountButton
};

function View$Page$Grid(Props) {
  return React.createElement(FramerMotion.motion.div, {
              children: React.createElement("div", {
                    className: "grid grid-cols-3 gap-4"
                  }, Belt_Array.map(Belt_Array.range(2, 10), (function (num) {
                          return React.createElement(View$Page$Grid$CountButton, {
                                      num: num,
                                      key: String(num)
                                    });
                        }))),
              exit: exit,
              initial: initial,
              animate: animate,
              transition: transition,
              key: "grid"
            });
}

var Grid = {
  CountButton: CountButton,
  make: View$Page$Grid
};

var Page = {
  initial: initial,
  animate: animate,
  exit: exit,
  transition: transition,
  Spinner: Spinner,
  Grid: Grid
};

function View$Transition(Props) {
  var children = Props.children;
  return React.createElement(FramerMotion.AnimatePresence, {
              initial: true,
              exitBeforeEnter: true,
              children: children
            });
}

var Transition = {
  make: View$Transition
};

function View(Props) {
  var state = Model$Bgquickstartcom.State.use(undefined);
  var count = state.count;
  var page;
  if (count !== undefined) {
    var player = state.player;
    page = player !== undefined ? React.createElement(View$Page$Spinner, {
            count: count,
            player: player,
            angle: state.angle
          }) : React.createElement(View$Page$Grid, {});
  } else {
    page = React.createElement(View$Page$Grid, {});
  }
  return React.createElement("div", {
              className: "flex flex-col items-center justify-center px-4 py-8 text-gray-300 bg-gray-900 App"
            }, React.createElement(View$Transition, {
                  children: null
                }, React.createElement(View$TheHeader, {}), page));
}

var make = View;

export {
  TheHeader ,
  Page ,
  Transition ,
  make ,
  
}
/* react Not a pure module */
