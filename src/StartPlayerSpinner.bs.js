// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_math from "bs-platform/lib/es6/js_math.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as FramerMotion from "framer-motion";

function StartPlayerSpinner$Button(Props) {
  var handleClick = Props.handleClick;
  var className = Props.className;
  var icon = Props.icon;
  var label = Props.label;
  return React.createElement(FramerMotion.motion.div, {
              children: React.createElement(FramerMotion.motion.div, {
                    children: null,
                    whileHover: {
                      scale: 1.05
                    },
                    whileTap: {
                      scale: 0.95
                    },
                    transition: {
                      duration: 0.125
                    },
                    onClick: (function (param) {
                        return Curry._1(handleClick, undefined);
                      }),
                    className: "flex flex-row justify-around items-center p-3 px-4 rounded font-bold cursor-pointer shadow-lg " + className
                  }, icon, label.toUpperCase()),
              initial: {
                opacity: 0.0,
                y: -5
              },
              animate: {
                opacity: 1.0,
                y: 0
              },
              transition: {
                delay: 0.25
              }
            });
}

var Button = {
  make: StartPlayerSpinner$Button
};

function StartPlayerSpinner$ArrowBack(Props) {
  var heightOpt = Props.height;
  var widthOpt = Props.width;
  var fillOpt = Props.fill;
  var height = heightOpt !== undefined ? heightOpt : "100%";
  var width = widthOpt !== undefined ? widthOpt : "100%";
  var fill = fillOpt !== undefined ? fillOpt : "currentColor";
  return React.createElement("svg", {
              height: height,
              width: width,
              viewBox: "0 0 24 24",
              xmlns: "http://www.w3.org/2000/svg"
            }, React.createElement("g", {
                  fill: fill
                }, React.createElement("g", undefined, React.createElement("path", {
                          d: "M19 11H7.14l3.63-4.36a1 1 0 1 0-1.54-1.28l-5 6a1.19 1.19 0 0 0-.09.15c0 .05 0 .08-.07.13A1 1 0 0 0 4 12a1 1 0 0 0 .07.36c0 .05 0 .08.07.13a1.19 1.19 0 0 0 .09.15l5 6A1 1 0 0 0 10 19a1 1 0 0 0 .64-.23 1 1 0 0 0 .13-1.41L7.14 13H19a1 1 0 0 0 0-2z"
                        }))));
}

var ArrowBack = {
  make: StartPlayerSpinner$ArrowBack
};

function StartPlayerSpinner$Shuffle(Props) {
  var heightOpt = Props.height;
  var widthOpt = Props.width;
  var fillOpt = Props.fill;
  var height = heightOpt !== undefined ? heightOpt : "100%";
  var width = widthOpt !== undefined ? widthOpt : "100%";
  var fill = fillOpt !== undefined ? fillOpt : "currentColor";
  return React.createElement("svg", {
              height: height,
              width: width,
              viewBox: "0 0 24 24",
              xmlns: "http://www.w3.org/2000/svg"
            }, React.createElement("g", {
                  fill: fill
                }, React.createElement("g", undefined, React.createElement("path", {
                          d: "M18.71 14.29a1 1 0 0 0-1.42 1.42l.29.29H16a4 4 0 0 1 0-8h1.59l-.3.29a1 1 0 0 0 0 1.42A1 1 0 0 0 18 10a1 1 0 0 0 .71-.29l2-2A1 1 0 0 0 21 7a1 1 0 0 0-.29-.71l-2-2a1 1 0 0 0-1.42 1.42l.29.29H16a6 6 0 0 0-5 2.69A6 6 0 0 0 6 6H4a1 1 0 0 0 0 2h2a4 4 0 0 1 0 8H4a1 1 0 0 0 0 2h2a6 6 0 0 0 5-2.69A6 6 0 0 0 16 18h1.59l-.3.29a1 1 0 0 0 0 1.42A1 1 0 0 0 18 20a1 1 0 0 0 .71-.29l2-2A1 1 0 0 0 21 17a1 1 0 0 0-.29-.71z"
                        }))));
}

var Shuffle = {
  make: StartPlayerSpinner$Shuffle
};

function StartPlayerSpinner$StartPlayerArrow(Props) {
  var chooseStartPlayer = Props.chooseStartPlayer;
  var isRotationClockwise = Props.isRotationClockwise;
  var angle = Props.angle;
  var adjustedNextRotation = isRotationClockwise ? 1080 + angle.next | 0 : angle.next;
  var initial = {
    width: 56,
    rotate: angle.prev,
    height: 56
  };
  var animate = {
    width: 56,
    rotate: adjustedNextRotation,
    height: 56
  };
  var transition = {
    duration: 0.125
  };
  var whileHover = {
    backgroundColor: "#5F6163"
  };
  var onClick = function (param) {
    return Curry._1(chooseStartPlayer, undefined);
  };
  return React.createElement(FramerMotion.motion.div, {
              children: React.createElement("div", {
                    className: "flex flex-col items-center justify-center w-2/3 startIcon"
                  }, React.createElement(StartPlayerSpinner$ArrowBack, {
                        height: "32",
                        width: "32"
                      })),
              initial: initial,
              animate: animate,
              whileHover: whileHover,
              transition: transition,
              onClick: onClick,
              className: "flex flex-col items-center justify-center text-gray-500 bg-gray-800 border-2 border-gray-700 border-solid rounded-full cursor-pointer start"
            });
}

var StartPlayerArrow = {
  make: StartPlayerSpinner$StartPlayerArrow
};

function StartPlayerSpinner$PlayerSeat(Props) {
  var rotateString = Props.rotateString;
  var seatNumber = Props.seatNumber;
  var startPlayer = Props.startPlayer;
  return React.createElement("div", {
              className: "m-auto dotBox",
              style: {
                transform: rotateString
              }
            }, React.createElement(FramerMotion.motion.div, {
                  className: "w-8 h-8 bg-gray-800 rounded-full dotItem dot"
                }), Caml_obj.caml_equal(seatNumber, startPlayer) ? React.createElement(FramerMotion.motion.div, {
                    initial: {
                      opacity: 0.0
                    },
                    animate: {
                      opacity: 1.0
                    },
                    transition: {
                      delay: 0.125,
                      duration: 0.25,
                      ease: "easeIn"
                    },
                    className: "w-8 h-8 bg-gray-400 rounded-full dotItem dot"
                  }) : React.createElement(React.Fragment, undefined));
}

var PlayerSeat = {
  make: StartPlayerSpinner$PlayerSeat
};

function StartPlayerSpinner$PlayerSeats(Props) {
  var count = Props.count;
  var startPlayer = Props.startPlayer;
  return React.createElement(React.Fragment, undefined, Belt_Array.map(Belt_Array.range(1, count), (function (seatNumber) {
                    var angle = String(Math.imul(Caml_int32.div(360, count), seatNumber) + 225 | 0) + "deg";
                    var rotateString = "rotate(" + angle + ")";
                    return React.createElement(StartPlayerSpinner$PlayerSeat, {
                                rotateString: rotateString,
                                seatNumber: seatNumber,
                                startPlayer: startPlayer,
                                key: "player-seat-" + String(seatNumber)
                              });
                  })));
}

var PlayerSeats = {
  make: StartPlayerSpinner$PlayerSeats
};

function StartPlayerSpinner(Props) {
  var count = Props.count;
  var setCount = Props.setCount;
  var match = React.useState(function () {
        return true;
      });
  var setIsRotationClockwise = match[1];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setStartPlayer = match$1[1];
  var match$2 = React.useState(function () {
        return {
                next: 0,
                prev: 0
              };
      });
  var setAngle = match$2[1];
  var chooseStartPlayer = function (param) {
    var newStartPlayer = Js_math.floor_int(Math.random() * count) + 1 | 0;
    Curry._1(setStartPlayer, (function (param) {
            return newStartPlayer;
          }));
    Curry._1(setIsRotationClockwise, (function (state) {
            return !state;
          }));
    var next = Math.imul(Caml_int32.div(360, count), newStartPlayer) + 225 | 0;
    return Curry._1(setAngle, (function (state) {
                  return {
                          prev: state.next,
                          next: next
                        };
                }));
  };
  React.useEffect((function () {
          chooseStartPlayer(undefined);
          
        }), [count]);
  var reset = function (param) {
    Curry._1(setCount, (function (param) {
            return 0;
          }));
    return Curry._1(setStartPlayer, (function (param) {
                  return 0;
                }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "dotWrap"
                }, React.createElement(StartPlayerSpinner$PlayerSeats, {
                      count: count,
                      startPlayer: match$1[0]
                    }), React.createElement("div", {
                      className: "m-auto startBox"
                    }, React.createElement(StartPlayerSpinner$StartPlayerArrow, {
                          chooseStartPlayer: chooseStartPlayer,
                          isRotationClockwise: match[0],
                          angle: match$2[0]
                        }))), React.createElement("p", {
                  className: "text-sm font-bold text-gray-400"
                }, "(YOU)"), React.createElement("div", {
                  className: "grid grid-cols-2 gap-4 mt-12"
                }, React.createElement(StartPlayerSpinner$Button, {
                      handleClick: reset,
                      className: "text-red-900 bg-red-300 hover:bg-red-200",
                      icon: React.createElement(StartPlayerSpinner$ArrowBack, {
                            height: "24",
                            width: "24"
                          }),
                      label: "reset"
                    }), React.createElement(StartPlayerSpinner$Button, {
                      handleClick: chooseStartPlayer,
                      className: "text-green-900 bg-green-400 hover:bg-green-300",
                      icon: React.createElement(StartPlayerSpinner$Shuffle, {
                            height: "24",
                            width: "24"
                          }),
                      label: "reroll"
                    })));
}

var make = StartPlayerSpinner;

export {
  Button ,
  ArrowBack ,
  Shuffle ,
  StartPlayerArrow ,
  PlayerSeat ,
  PlayerSeats ,
  make ,
  
}
/* react Not a pure module */
