// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_math from "bs-platform/lib/es6/js_math.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";

var initialState = {
  count: undefined,
  player: undefined,
  rotation: /* Clockwise */0,
  prevAngle: 0,
  angle: 0
};

function reducer(state, action) {
  if (!action) {
    return {
            count: undefined,
            player: undefined,
            rotation: /* Clockwise */0,
            prevAngle: 0,
            angle: 0
          };
  }
  var count = action.count;
  var choose = function (count) {
    return Js_math.floor_int(Math.random() * count) + 1 | 0;
  };
  var match = state.rotation;
  var rotation = match ? /* Clockwise */0 : /* CounterClockwise */1;
  var player = choose(count);
  var nextAngle = Math.imul(Caml_int32.div(360, count), player) + 225 | 0;
  var angle = rotation ? nextAngle : 1080 + nextAngle | 0;
  return {
          count: count,
          player: player,
          rotation: rotation,
          prevAngle: state.angle,
          angle: angle
        };
}

var ctx = React.createContext(initialState);

var provider = ctx.Provider;

function Model$State$Provider(Props) {
  var children = Props.children;
  var value = Props.value;
  return React.createElement(provider, {
              children: children,
              value: value
            });
}

var Provider = {
  provider: provider,
  make: Model$State$Provider
};

var State = {
  ctx: ctx,
  Provider: Provider
};

var ctx$1 = React.createContext(function (param) {
      
    });

var provider$1 = ctx$1.Provider;

function Model$Dispatch$Provider(Props) {
  var children = Props.children;
  var value = Props.value;
  return React.createElement(provider$1, {
              children: children,
              value: value
            });
}

var Provider$1 = {
  provider: provider$1,
  make: Model$Dispatch$Provider
};

var Dispatch = {
  ctx: ctx$1,
  Provider: Provider$1
};

function Model(Props) {
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  return React.createElement(Model$Dispatch$Provider, {
              children: React.createElement(Model$State$Provider, {
                    children: children,
                    value: match[0]
                  }),
              value: match[1]
            });
}

var make = Model;

export {
  initialState ,
  reducer ,
  State ,
  Dispatch ,
  make ,
  
}
/* ctx Not a pure module */
